# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CD Pipeline Java with Maven for resource-server

on:
  push:
    paths:
        - resource_server/**
    branches: [ "deploy", "main" ]
jobs:
  build:
    defaults:
      run:
        working-directory: ./resource_server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKERHUB_USERNAME }}/${{vars.PROJECT_NAME_RESOURCE }}:${{ github.sha }} -t ${{ secrets.DOCKERHUB_USERNAME }}/${{vars.PROJECT_NAME_RESOURCE}}:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.PROJECT_NAME_RESOURCE }} --all-tags
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST_RESOURCE }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY_RESOURCE }}
          username: resource-server
          script: |
            cd ~/j2ee-backend
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{vars.PROJECT_NAME_RESOURCE}}:latest
            docker stop $(docker ps -a -q)
            docker run -p 8080:8080 --env-file ./.env -d ${{ secrets.DOCKERHUB_USERNAME }}/${{vars.PROJECT_NAME_RESOURCE}}:latest
          # docker compose stop
          # docker compose up app -d 
